/**
 * Script de prueba para el servicio de anonimizaci√≥n con Transformer.js
 * Versi√≥n con IA multiidioma
 */

const { anonymizationService } = require('./src/services/anonymizationService.js');

// Datos de prueba multiidioma
const testCases = [
  {
    language: 'spa',
    content: `[15/02/24, 16:31:02] Mar√≠a Garc√≠a: Hola Antonio, ¬øc√≥mo est√°s?
[15/02/24, 16:31:15] Antonio L√≥pez: Muy bien, gracias. ¬øHas visto a mi hermano Carlos?
[15/02/24, 16:31:30] Mar√≠a Garc√≠a: S√≠, lo vi en la Calle Mayor 123 con el Doctor P√©rez.
[15/02/24, 16:31:45] Antonio L√≥pez: Perfecto, mi padre vive cerca. Tel√©fono 666123456.`
  },
  {
    language: 'eng',
    content: `2/15/24, 4:31 PM - John Smith: Hello everyone!
2/15/24, 4:32 PM - Sarah Johnson: Hi John! Have you seen my brother Mike?
2/15/24, 4:33 PM - John Smith: Yes, he was at Main Street 456 with Doctor Brown.
2/15/24, 4:34 PM - Sarah Johnson: Great! My mother lives there. Phone: +1-555-123-4567.`
  },
  {
    language: 'deu',
    content: `[15.02.24, 16:31:02] Hans M√ºller: Hallo Anna, wie geht es dir?
[15.02.24, 16:31:15] Anna Schmidt: Gut, danke. Hast du meinen Vater Klaus gesehen?
[15.02.24, 16:31:30] Hans M√ºller: Ja, er war in der Hauptstra√üe 789 mit Professor Weber.
[15.02.24, 16:31:45] Anna Schmidt: Perfekt! Meine Mutter wohnt da. Telefon: +49-30-12345678.`
  },
  {
    language: 'zho',
    content: `[15/02/24, 16:31:02] ÊùéÊòé: ‰Ω†Â•ΩÂº†ÂçéÔºå‰Ω†ÊÄé‰πàÊ†∑Ôºü
[15/02/24, 16:31:15] Âº†Âçé: ÂæàÂ•ΩÔºåË∞¢Ë∞¢„ÄÇ‰Ω†ÁúãÂà∞ÊàëÁöÑÂì•Âì•ÁéãÂäõ‰∫ÜÂêóÔºü
[15/02/24, 16:31:30] ÊùéÊòé: ÁúãÂà∞‰∫ÜÔºå‰ªñÂú®Âåó‰∫¨Ë∑Ø123Âè∑ÂíåÂåªÁîüÂàòÂçöÂ£´Âú®‰∏ÄËµ∑„ÄÇ
[15/02/24, 16:31:45] Âº†Âçé: Â§™Â•Ω‰∫ÜÔºÅÊàëÁöÑÊØç‰∫≤‰ΩèÂú®ÈÇ£ÈôÑËøë„ÄÇ`
  },
  {
    language: 'jpn',
    content: `[15/02/24, 16:31:02] Áî∞‰∏≠Â§™ÈÉé: „Åì„Çì„Å´„Å°„ÅØÂ±±Áî∞„Åï„Çì„ÄÅÂÖÉÊ∞ó„Åß„Åô„ÅãÔºü
[15/02/24, 16:31:15] Â±±Áî∞Ëä±Â≠ê: „ÅØ„ÅÑ„ÄÅÂÖÉÊ∞ó„Åß„Åô„ÄÇÁßÅ„ÅÆÂÖÑ„ÅÆÈà¥Êú®‰∏ÄÈÉé„ÇíË¶ã„Åæ„Åó„Åü„ÅãÔºü
[15/02/24, 16:31:30] Áî∞‰∏≠Â§™ÈÉé: „ÅØ„ÅÑ„ÄÅÊù±‰∫¨ÈßÖÂâç„Åß‰ΩêËó§ÂÖàÁîü„Å®‰∏ÄÁ∑í„Å´„ÅÑ„Åæ„Åó„Åü„ÄÇ
[15/02/24, 16:31:45] Â±±Áî∞Ëä±Â≠ê: „Çà„Åã„Å£„ÅüÔºÅÁßÅ„ÅÆÊØç„Åå„Åù„Åì„Å´‰Ωè„Çì„Åß„ÅÑ„Åæ„Åô„ÄÇ`
  }
];

async function runAITests() {
  console.log('üöÄ Iniciando pruebas con Transformer.js');
  console.log('=' .repeat(60));

  // Inicializar el servicio y cargar modelo de IA
  console.log('1Ô∏è‚É£ Inicializando modelo de IA...');
  const aiLoaded = await anonymizationService.initializeAI();
  
  if (!aiLoaded) {
    console.log('‚ùå No se pudo cargar el modelo de IA');
    console.log('üìã Las pruebas se ejecutar√°n con patrones regex');
  } else {
    console.log('‚úÖ Modelo de IA cargado correctamente');
  }

  console.log('\n2Ô∏è‚É£ Informaci√≥n de idiomas soportados:');
  const languages = anonymizationService.getSupportedLanguages();
  Object.entries(languages).forEach(([code, info]) => {
    console.log(`   ${code}: ${info.name} | IA: ${info.aiSupport ? '‚úÖ' : '‚ùå'} | Patrones: ${info.patternSupport ? '‚úÖ' : '‚ùå'}`);
  });

  console.log('\n3Ô∏è‚É£ Ejecutando pruebas por idioma:');
  console.log('-'.repeat(60));

  for (const testCase of testCases) {
    console.log(`\nüåç Procesando ${testCase.language.toUpperCase()}:`);
    
    // Reiniciar el servicio para cada prueba
    anonymizationService.reset();
    
    const startTime = performance.now();
    const result = await anonymizationService.processContentForAzure(testCase.content);
    const endTime = performance.now();

    console.log(`‚è±Ô∏è  Tiempo de procesamiento: ${(endTime - startTime).toFixed(2)}ms`);
    
    // Mostrar estad√≠sticas
    const stats = anonymizationService.getProcessingStats();
    console.log(`üìä Estad√≠sticas:`);
    console.log(`   - Idioma detectado: ${stats.currentLanguage}`);
    console.log(`   - Participantes: ${stats.participantsProcessed}`);
    console.log(`   - Personas mencionadas: ${stats.mentionedPeopleProcessed}`);
    console.log(`   - Lugares: ${stats.locationsProcessed}`);
    console.log(`   - Modelo IA activo: ${stats.modelLoaded ? '‚úÖ' : '‚ùå'}`);

    // Mostrar el resultado
    console.log(`\nüìù Texto original:`);
    console.log(testCase.content.substring(0, 150) + '...');
    
    console.log(`\n‚ú® Texto anonimizado:`);
    console.log(result.substring(0, 200) + '...');

    // Mostrar mapeos
    const mappings = anonymizationService.getAllMappings();
    if (Object.keys(mappings.participants).length > 0) {
      console.log(`\nüîó Mapeos creados:`);
      console.log(`   Participantes:`, mappings.participants);
      if (Object.keys(mappings.mentionedPeople).length > 0) {
        console.log(`   Personas mencionadas:`, mappings.mentionedPeople);
      }
      if (Object.keys(mappings.locations).length > 0) {
        console.log(`   Lugares:`, mappings.locations);
      }
    }
  }

  console.log('\n4Ô∏è‚É£ Comparativa de rendimiento (IA vs Patrones):');
  console.log('-'.repeat(60));

  const spanishTestContent = testCases[0].content;
  
  // Probar con IA
  anonymizationService.reset();
  anonymizationService.setAIMode(true);
  const aiStartTime = performance.now();
  const aiResult = await anonymizationService.processContentForAzure(spanishTestContent);
  const aiEndTime = performance.now();
  const aiTime = aiEndTime - aiStartTime;

  // Probar con patrones
  anonymizationService.reset();
  anonymizationService.setAIMode(false);
  const patternStartTime = performance.now();
  const patternResult = await anonymizationService.processContentForAzure(spanishTestContent);
  const patternEndTime = performance.now();
  const patternTime = patternEndTime - patternStartTime;

  console.log(`ü§ñ Procesamiento con IA: ${aiTime.toFixed(2)}ms`);
  console.log(`üìã Procesamiento con patrones: ${patternTime.toFixed(2)}ms`);
  console.log(`‚ö° Diferencia de velocidad: ${(aiTime / patternTime).toFixed(2)}x ${aiTime > patternTime ? 'm√°s lento' : 'm√°s r√°pido'}`);

  // Comparar calidad de resultados
  console.log(`\nüîç Comparaci√≥n de resultados:`);
  console.log(`IA detect√≥: ${(aiResult.match(/\[PERSONA \d+\]/g) || []).length} personas`);
  console.log(`Patrones detectaron: ${(patternResult.match(/\[PERSONA \d+\]/g) || []).length} personas`);

  console.log('\n‚úÖ Pruebas completadas');
  console.log('=' .repeat(60));
}

// Funci√≥n para probar la descarga de modelos
async function testModelDownload() {
  console.log('üì¶ Probando descarga de modelo...');
  
  try {
    // Esto deber√≠a iniciar la descarga del modelo autom√°ticamente
    const aiLoaded = await anonymizationService.initializeAI();
    
    if (aiLoaded) {
      console.log('‚úÖ Modelo descargado y cargado correctamente');
      
      // Probar una predicci√≥n simple
      const testText = "Hola, soy Juan P√©rez y vivo en Madrid.";
      const result = await anonymizationService.anonymizeWithAI(testText);
      console.log('üî¨ Prueba simple:', result);
      
    } else {
      console.log('‚ùå Error descargando modelo');
    }
  } catch (error) {
    console.log('‚ùå Error:', error.message);
  }
}

// Funci√≥n principal
async function main() {
  console.log('üß™ PRUEBAS DEL SERVICIO DE ANONIMIZACI√ìN CON TRANSFORMER.JS');
  console.log('================================================================');
  
  try {
    // Primero probar la descarga del modelo
    await testModelDownload();
    
    console.log('\n');
    
    // Luego ejecutar todas las pruebas
    await runAITests();
    
  } catch (error) {
    console.error('‚ùå Error en las pruebas:', error);
    console.error('Stack trace:', error.stack);
  }
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { runAITests, testModelDownload }; 
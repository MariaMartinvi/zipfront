/**
 * Script de prueba simple para el servicio de anonimizaci√≥n multiidioma sin dependencias externas
 * Ejecutar con: node test-simple-anonymization.js
 */

const { anonymizationService } = require('./src/services/anonymizationService.js');

console.log('üß™ PROBANDO SERVICIO DE ANONIMIZACI√ìN SIMPLIFICADO\n');

// Ejemplo de texto en espa√±ol
const chatEspa√±ol = `[12/03/23, 14:30:15] Dr. Garc√≠a: Hola Mar√≠a L√≥pez, te veo ma√±ana en la Calle Mayor 123, Madrid.
[12/03/23, 14:31:02] Mar√≠a L√≥pez: Perfecto, ¬øtraigo a mi hermano Juan?
[12/03/23, 14:32:15] Dr. Garc√≠a: S√≠, y tambi√©n puedes traer a tu padre.`;

// Ejemplo de texto en ingl√©s
const chatIngles = `[12/03/23, 14:30:15] John Smith: Hello Sarah, I'll meet you at 5th Avenue 456, New York.
[12/03/23, 14:31:02] Sarah Johnson: Great, should I bring my brother Michael?
[12/03/23, 14:32:15] John Smith: Yes, and also your mother.`;

// Ejemplo de texto en alem√°n
const chatAleman = `[12/03/23, 14:30:15] Dr. M√ºller: Hallo Anna, ich sehe Sie morgen in der Hauptstra√üe 123, Berlin.
[12/03/23, 14:31:02] Anna Schmidt: Perfekt, soll ich meinen Bruder Hans mitbringen?
[12/03/23, 14:32:15] Dr. M√ºller: Ja, und auch Ihre Mutter.`;

async function probarAnonimizacion() {
  const ejemplos = [
    { nombre: 'Espa√±ol', contenido: chatEspa√±ol },
    { nombre: 'Ingl√©s', contenido: chatIngles },
    { nombre: 'Alem√°n', contenido: chatAleman }
  ];

  for (const ejemplo of ejemplos) {
    console.log(`üåê PROBANDO: ${ejemplo.nombre.toUpperCase()}`);
    console.log('üìù Contenido original:');
    console.log(ejemplo.contenido);
    console.log('\nüîÑ Procesando...\n');

    // Resetear para cada prueba
    anonymizationService.reset();

    try {
      const inicio = Date.now();
      const resultado = await anonymizationService.processContentForAzure(ejemplo.contenido);
      const fin = Date.now();

      console.log('‚úÖ Contenido anonimizado:');
      console.log(resultado);
      console.log(`\n‚è±Ô∏è  Tiempo: ${fin - inicio}ms`);

      // Mostrar estad√≠sticas
      const stats = anonymizationService.getProcessingStats();
      console.log('\nüìä ESTAD√çSTICAS:');
      console.log(`   Idioma detectado: ${stats.currentLanguage}`);
      console.log(`   Participantes: ${stats.participantsProcessed}`);
      console.log(`   Personas mencionadas: ${stats.mentionedPeopleProcessed}`);
      console.log(`   Lugares: ${stats.locationsProcessed}`);

      // Mostrar mapeos
      const mapeos = anonymizationService.getAllMappings();
      if (Object.keys(mapeos.participants).length > 0) {
        console.log('\nüóÇÔ∏è  MAPEOS:');
        console.log('   Participantes:', mapeos.participants);
        if (Object.keys(mapeos.mentionedPeople).length > 0) {
          console.log('   Personas:', mapeos.mentionedPeople);
        }
        if (Object.keys(mapeos.locations).length > 0) {
          console.log('   Lugares:', mapeos.locations);
        }
      }

    } catch (error) {
      console.error('‚ùå ERROR:', error.message);
    }

    console.log('\n' + '='.repeat(80) + '\n');
  }

  // Probar detecci√≥n de idiomas
  console.log('üîç PRUEBA DE DETECCI√ìN DE IDIOMA:');
  const textosPrueba = {
    'Hola, ¬øc√≥mo est√°s? Me llamo Juan.': 'Espa√±ol esperado',
    'Hello, how are you? My name is John.': 'Ingl√©s esperado',
    'Hallo, wie geht es dir? Mein Name ist Hans.': 'Alem√°n esperado',
    'Bonjour, comment √ßa va? Je m\'appelle Pierre.': 'Franc√©s esperado',
    'Ciao, come stai? Mi chiamo Marco.': 'Italiano esperado',
    'Hola, com est√†s? Em dic Pere.': 'Catal√°n esperado',
    'Kaixo, zer moduz? Mikel naiz.': 'Euskera esperado'
  };

  for (const [texto, esperado] of Object.entries(textosPrueba)) {
    const idioma = anonymizationService.detectLanguage(texto);
    const nombreIdioma = anonymizationService.getSupportedLanguages()[idioma]?.name || idioma;
    console.log(`   "${texto}" ‚Üí ${nombreIdioma} (${esperado})`);
  }

  console.log('\nüéâ PRUEBAS COMPLETADAS!');
}

// Ejecutar pruebas
probarAnonimizacion().catch(console.error); 
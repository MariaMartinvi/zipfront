import React, { useState } from 'react';
import { OpenAI } from 'openai';

// Componente para manejar la integraci√≥n directa con Azure OpenAI desde el cliente
const AzureClientComponent = ({ chatContent, onAnalysisComplete, onError, language = 'es' }) => {
  const [isAnalyzing, setIsAnalyzing] = useState(false);

  // Prompts multiidioma para diferentes idiomas
  const PROMPTS = {
    'es': `Analiza la conversaci√≥n proporcionada como un psic√≥logo observador y con sentido del humor, incisivo y directo. 
    Presenta tu an√°lisis en el siguiente formato, usando markdown para las secciones.
    Es MUY IMPORTANTE que sigas el formato exacto:

    ## üß† An√°lisis de personalidades 

    Para cada persona de la conversaci√≥n (usa exacestructuradotamente este formato). Intenta que aparezcan en el an√°lisis todas las personas:
    
    ### [Nombre] 
    - **Rol en el grupo:** [L√≠der/Mediador/Observador/etc]
    - **Rasgos principales:** [Haz una descripci√≥n de la personalidad, puedes aportar ejemplos del chat si hacen que la respuesta sea m√°s realista]
    - **Fortalezas:** [1-2 fortalezas]
    - **√Åreas de mejora:** [1-2 √°reas donde podr√≠a mejorar]

    ## üö© Se√±ales de alerta
    - [Lista de aspectos preocupantes en la din√°mica del grupo, si existen]

    ## üíØ Evaluaci√≥n de la relaci√≥n
    - **Puntuaci√≥n:** [1-10] 
    - **Justificaci√≥n:** [Breve explicaci√≥n de la puntuaci√≥n]
    - **Nivel de confianza:** [Alto/Medio/Bajo]
    - **Din√°mica predominante:** [Cooperaci√≥n/Competencia/Apoyo/etc]

    ## üí° Recomendaciones
    - [3-4 consejos pr√°cticos para mejorar la din√°mica del grupo]

    Aseg√∫rate de ser objetivo, respetuoso y constructivo en tu an√°lisis.`,
    
    'en': `Analyze the provided conversation as an observant psychologist with a sense of humor, incisive and direct.
    Present your analysis in the following format, using markdown for sections.
    It is VERY IMPORTANT that you follow the exact format:

    ## üß† Personality Analysis

    For each person in the conversation (use exactly this format). Try to include all people in the analysis:
    
    ### [Name] 
    - **Role in the group:** [Leader/Mediator/Observer/etc]
    - **Main traits:** [Describe the personality, you can provide examples from the chat to make the response more realistic]
    - **Strengths:** [1-2 strengths]
    - **Areas for improvement:** [1-2 areas where they could improve]

    ## üö© Warning Signs
    - [List of concerning aspects in the group dynamics, if any]

    ## üíØ Relationship Evaluation
    - **Score:** [1-10] 
    - **Justification:** [Brief explanation of the score]
    - **Confidence level:** [High/Medium/Low]
    - **Predominant dynamic:** [Cooperation/Competition/Support/etc]

    ## üí° Recommendations
    - [3-4 practical tips to improve group dynamics]

    Make sure to be objective, respectful, and constructive in your analysis.`,
    
    'fr': `Analysez la conversation fournie en tant que psychologue observateur avec un sens de l'humour, incisif et direct.
    Pr√©sentez votre analyse dans le format suivant, en utilisant du markdown pour les sections.
    Il est TR√àS IMPORTANT que vous suiviez exactement ce format:

    ## üß† Analyse des personnalit√©s

    Pour chaque personne dans la conversation (utilisez exactement ce format). Essayez d'inclure toutes les personnes dans l'analyse:
    
    ### [Nom] 
    - **R√¥le dans le groupe:** [Leader/M√©diateur/Observateur/etc]
    - **Traits principaux:** [Faites une description de la personnalit√©, vous pouvez fournir des exemples du chat pour rendre la r√©ponse plus r√©aliste]
    - **Forces:** [1-2 forces]
    - **Axes d'am√©lioration:** [1-2 domaines o√π ils pourraient s'am√©liorer]

    ## üö© Signaux d'alerte
    - [Liste des aspects pr√©occupants dans la dynamique de groupe, s'il y en a]

    ## üíØ √âvaluation de la relation
    - **Score:** [1-10] 
    - **Justification:** [Br√®ve explication du score]
    - **Niveau de confiance:** [√âlev√©/Moyen/Bas]
    - **Dynamique pr√©dominante:** [Coop√©ration/Comp√©tition/Soutien/etc]

    ## üí° Recommandations
    - [3-4 conseils pratiques pour am√©liorer la dynamique de groupe]

    Assurez-vous d'√™tre objectif, respectueux et constructif dans votre analyse.`,
  };

  // Prefijos para instrucciones del usuario multiidioma
  const USER_PREFIXES = {
    'es': "Analiza el siguiente contenido extra√≠do de una conversaci√≥n:",
    'en': "Analyze the following content extracted from a conversation:",
    'fr': "Analysez le contenu suivant extrait d'une conversation :",
    'de': "Analysieren Sie den folgenden Inhalt aus einem Gespr√§ch:",
    'it': "Analizza il seguente contenuto estratto da una conversazione:"
  };

  // Funci√≥n para seleccionar el modelo √≥ptimo basado en la longitud del texto
  const selectOptimalModel = (textLength) => {
    // Por ahora, usamos exclusivamente gpt-4o-mini que tiene la mejor relaci√≥n rendimiento/costo
    return "gpt-4o-mini";
  };

  // Funci√≥n principal para analizar el chat
  const analyzeChat = async () => {
    if (!chatContent) {
      onError("No hay contenido de chat para analizar");
      return;
    }

    try {
      setIsAnalyzing(true);
      
      // Obtener el prompt en el idioma correspondiente
      const systemPrompt = PROMPTS[language] || PROMPTS['es'];
      const userPrefix = USER_PREFIXES[language] || USER_PREFIXES['es'];
      
      // Calcular longitud del contenido
      const contentLength = chatContent.length;
      
      // Seleccionar modelo basado en la longitud
      const model = selectOptimalModel(contentLength);
      
      // Obtener credenciales de las variables de entorno
      const endpoint = process.env.REACT_APP_AZURE_ENDPOINT;
      const apiKey = process.env.REACT_APP_AZURE_API_KEY;
      
      console.log(`Endpoint Azure: ${endpoint}`);
      console.log(`Clave API: ${apiKey ? "Configurada correctamente" : "No configurada"}`);
      
      if (!endpoint || !apiKey) {
        onError("Faltan credenciales de Azure OpenAI. Verifica las variables de entorno.");
        setIsAnalyzing(false);
        return;
      }
      
      // Inicializar el cliente de Azure OpenAI usando la biblioteca openai actualizada
      const client = new OpenAI({
        apiKey: apiKey,
        baseURL: `${endpoint}openai/deployments/${model}`,
        defaultQuery: { "api-version": "2024-12-01-preview" },
        defaultHeaders: { "api-key": apiKey }
      });
      
      console.log(`Analizando chat con modelo ${model}, longitud: ${contentLength} caracteres`);
      
      // Preparar los mensajes para la API
      const messages = [
        { role: "system", content: systemPrompt },
        { role: "user", content: `${userPrefix}\n\n${chatContent}` }
      ];
      
      console.log("Enviando solicitud a Azure OpenAI...");
      
      // Hacer la solicitud a la API
      const response = await client.chat.completions.create({
        model: model,
        messages: messages,
        temperature: 0.5,
        max_tokens: 4000
      });
      
      console.log("Respuesta recibida correctamente");
      
      // Extraer la respuesta
      const analysisResult = response.choices[0].message.content;
      
      // Pasar los resultados al componente padre
      onAnalysisComplete(analysisResult);
      
    } catch (error) {
      console.error("Error al analizar el chat con Azure OpenAI:", error);
      
      // Mostrar detalles t√©cnicos del error para diagn√≥stico
      console.log("Detalles t√©cnicos del error:", {
        mensaje: error.message,
        tipo: error.constructor.name,
        c√≥digo: error.status || error.statusCode,
        respuesta: error.response?.data || error.response?.body,
        stack: error.stack
      });
      
      // Manejar errores espec√≠ficos
      if (error.status === 429 || error.statusCode === 429) {
        onError("L√≠mite de solicitudes alcanzado. Por favor, intenta m√°s tarde.");
      } else if (error.status === 401 || error.status === 403 || error.statusCode === 401 || error.statusCode === 403) {
        onError("Error de autenticaci√≥n con Azure OpenAI. Verifica las credenciales.");
      } else if (error.message && error.message.includes("network")) {
        onError("Error de conexi√≥n con Azure OpenAI. Verifica tu conexi√≥n a Internet.");
      } else {
        onError(`Error al analizar el chat: ${error.message || "Error desconocido"}`);
      }
    } finally {
      setIsAnalyzing(false);
    }
  };

  // Iniciar an√°lisis autom√°ticamente cuando recibimos contenido
  React.useEffect(() => {
    if (chatContent && !isAnalyzing) {
      analyzeChat();
    }
  }, [chatContent]);

  return (
    <div style={{ display: 'none' }}>
      {/* Componente invisible que solo maneja la l√≥gica */}
    </div>
  );
};

export default AzureClientComponent; 
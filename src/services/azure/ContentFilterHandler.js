/**
 * ContentFilterHandler.js - Manejo de filtros de contenido de Azure OpenAI
 * 
 * Este m√≥dulo implementa estrategias para minimizar los errores de content filtering
 * y proporciona manejo robusto de errores cuando ocurren.
 */

// Diccionario de palabrotas/malsonantes por idioma (extra√≠do de Analisis_top.js)
const PALABRAS_MALSONANTES = {
  es: [
    // Tier 1 (suaves)
    'joder', 'jolines', 'jop√©', 'jope', 'jobar',
    'mierda', 'mi√©rcoles', 'mierdecilla',
    'cabr√≥n', 'cabreo', 'cabronada', 'cabronazo',
    'co√±o', 'co√±e', 'co√±azo', 'co√±o√±azo',
    'hostia', 'ostras', 'hostias', 'ostiaputa',
    'leches', 'mecag√ºen', 'mecago', 'cagada',
    'gilipollas', 'gilipichis', 'gilipollo', 'gili',
    'tonto', 'idiota', 'imb√©cil', 'subnormal',
    'puto', 'puta', 'putada', 'put√≠simo',
    'follar', 'jodido', 'jodida', 'jodiendo',
    'cojones', 'huevos', 'pelotas', 'carajo',
    'hijo de puta', 'hijoputa', 'hdp', 'hp',
    'maric√≥n', 'marica', 'mariconazo', 'bollera',
    'zorra', 'zorrita', 'zorron', 'guarra',
    'capullo', 'capullito', 'capullazo', 'mam√≥n',

    // Tier 2 (moderadas)
    'me cago en', 'me cago', 'cagarse', 'cagar',
    'que te den', 'vete a tomar', 'que os jodan',
    'gilipolleces', 'gilipollez', 'chorrada', 'parida',
    'borra eso', 'elimina', 'quita eso', 'censura',
    'mamar', 'mamada', 'mamadas', 'chupada',
    'pedazo de', 'trozo de', 'eres un', 'sois unos',
    'vaya mierda', 'qu√© asco', 'es una puta',
    'hacer el', 'haciendo el', 'haces el', 'que haga',

    // Tier 3 (m√°s fuertes)
    'maldito', 'maldita', 'maldici√≥n', 'maldita sea',
    'desgraciado', 'desgraciada', 'sinverg√ºenza',
    'bastardo', 'bastarda', 'cabrona', 'hijaputa',
    'que le den', 'que se joda', 'que os den',
    'por el culo', 'por culo', 'culo', 'ojete',
    'cojonudo', 'cojonuda', 'acojonante', 'acojona',
    'la hostia', 'te parto', 'te reviento', 'te mato',
    'me suda', 'me da igual', 'me importa', 'que se'
  ],

  en: [
    // Basic profanity
    'fuck', 'fucking', 'fucked', 'fucker', 'motherfucker',
    'shit', 'bullshit', 'shitty', 'shithead', 'dipshit',
    'damn', 'goddamn', 'dammit', 'god damn',
    'bitch', 'bitchy', 'son of a bitch', 'bastard',
    'asshole', 'ass', 'dumbass', 'smartass',
    'crap', 'crappy', 'piece of crap', 'full of crap',
    'hell', 'what the hell', 'go to hell', 'like hell',
    'piss', 'pissed', 'pissed off', 'piss off',

    // Stronger profanity
    'cunt', 'cock', 'dick', 'dickhead', 'prick',
    'pussy', 'twat', 'slut', 'whore', 'skank',
    'retard', 'retarded', 'stupid', 'idiot', 'moron',
    'loser', 'pathetic', 'worthless', 'useless',
    'shut up', 'shut the fuck up', 'stfu',
    'kill yourself', 'go die', 'drop dead',
    'hate', 'i hate', 'fucking hate', 'hate you'
  ],

  fr: [
    'merde', 'putain', 'bordel', 'connard', 'connasse',
    'salaud', 'salope', 'fils de pute', 'enfoir√©',
    'ta gueule', 'ferme ta gueule', 'con', 'conne',
    'cr√©tin', 'd√©bile', 'abruti', 'idiot', 'imb√©cile',
    'chiant', 'relou', 'emmerdant', 'fait chier',
    'nique', 'niquer', 'baise', 'baiser', 'foutre',
    'cul', 'bite', 'couilles', 'chatte', 'salaud'
  ],

  de: [
    'schei√üe', 'verdammt', 'arschloch', 'idiot', 'bl√∂dmann',
    'hurensohn', 'fotze', 'mistst√ºck', 'bastard',
    'halt die fresse', 'maul halten', 'dumm', 'bescheuert',
    'fick', 'ficken', 'verfickt', 'kacke', 'mist'
  ],

  it: [
    'merda', 'cazzo', 'stronzo', 'bastardo', 'figlio di puttana',
    'vaffanculo', 'porco dio', 'madonna', 'coglione',
    'idiota', 'stupido', 'imbecille', 'testa di cazzo',
    'fottere', 'scopare', 'troia', 'puttana', 'zoccola'
  ],

  pt: [
    'merda', 'porra', 'caralho', 'filho da puta', 'filha da puta',
    'vai se foder', 'puta que pariu', 'desgra√ßa', 'cuz√£o',
    'idiota', 'burro', 'imbecil', 'ot√°rio', 'babaca',
    'cacete', 'buceta', 'cu', 'pinto', 'rola'
  ],

  ca: [
    'merda', 'collons', 'fill de puta', 'cabr√≥', 'imb√®cil',
    'idiota', 'est√∫pid', 'que et fotin', 'v√©s a fer punyetes',
    'cony', 'ostres', 'cagar', 'pixar'
  ],

  eu: [
    'kaka', 'putain', 'idiota', 'ergel', 'txakur',
    'zakar', 'puta', 'kaka zaharra', 'zoramena'
  ]
};

// Configuraci√≥n para OpenAI API (GPT-4 mini fallback)
const OPENAI_CONFIG = {
  baseURL: 'https://api.openai.com/v1',
  model: 'gpt-4o-mini',
  maxTokens: 4000,
  temperature: 0.7
};

/**
 * Clase para manejar errores de content filtering
 */
export class ContentFilterHandler {
// M√©todo removido - ya no se sanitiza el contenido en el intento inicial

  /**
   * Detecta si un error es por content filtering
   * @param {Error} error - Error a verificar
   * @returns {boolean} - true si es error de content filtering
   */
  static isContentFilterError(error) {
    if (!error) return false;
    
    const errorMessage = error.message || '';
    const errorString = error.toString() || '';
    const errorName = error.name || '';
    
    // Detectar todos los tipos de errores de content filtering
    const contentFilterPatterns = [
      'content management policy',
      'content filter',
      'filtered due to',
      'response was filtered',
      'prompt triggering Azure OpenAI\'s content management policy',
      'BadRequestError: 400 The response was filtered',
      'content filtering',
      'content policy violation',
      'inappropriate content detected'
    ];
    
    return contentFilterPatterns.some(pattern => 
      errorMessage.toLowerCase().includes(pattern.toLowerCase()) ||
      errorString.toLowerCase().includes(pattern.toLowerCase()) ||
      errorName.toLowerCase().includes(pattern.toLowerCase())
    );
  }

// M√©todo removido - ya no se modifica el prompt original

  /**
   * Sanitiza contenido espec√≠fico para fallback por idioma
   * @param {string} content - Contenido original
   * @param {string} language - Idioma ('es', 'en', 'fr', etc.)
   * @returns {string} - Contenido sanitizado para el idioma espec√≠fico
   */
  static sanitizeContentForFallback(content, language = 'es') {
    if (!content) return content;
    
    const palabras = PALABRAS_MALSONANTES[language] || PALABRAS_MALSONANTES.es;
    let sanitized = content;
    
    // Reemplazar palabrotas espec√≠ficas del idioma
    palabras.forEach(palabra => {
      const regex = new RegExp(`\\b${palabra.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\b`, 'gi');
      sanitized = sanitized.replace(regex, '[CENSURADO]');
    });
    
    // Sanitizaci√≥n ULTRA-AGRESIVA para evitar content filtering
    sanitized = sanitized
      // Palabras de violencia extrema
      .replace(/\b(kill|murder|die|death|violence|terrorist|bomb|explosion|attack|rape|assault)\b/gi, '[CENSURADO]')
      .replace(/\b(killing|murdering|dying|violent|bombing|exploding|attacking|raping)\b/gi, '[CENSURADO]')
      
      // Frases peligrosas completas
      .replace(/\b(kill you|kill them|kill all|murder you|rape all|terrorist attack)\b/gi, '[CENSURADO]')
      .replace(/\b(bomb explosion|violence death|death murder)\b/gi, '[CENSURADO]')
      
      // Amenazas espec√≠ficas
      .replace(/\b(i will kill|going to kill|voy a matar|vamos a matar|vamos a violar)\b/gi, '[CENSURADO]')
      .replace(/\b(asesinar|violar|matar a todos)\b/gi, '[CENSURADO]')
      
      // Reducir may√∫sculas agresivas
      .replace(/([A-Z]{4,})/g, match => match.charAt(0) + match.slice(1).toLowerCase())
      .replace(/([!?]{3,})/g, '.')
      
      // Eliminar secuencias de palabras peligrosas juntas
      .replace(/\b(fucking.*?shit|goddamn.*?motherfucking)\b/gi, '[CENSURADO]')
      .replace(/\b(hijo.*?puta.*?cabrones)\b/gi, '[CENSURADO]')
      
      .substring(0, 8000);
    
    return sanitized;
  }

  /**
   * Fallback a GPT-4 mini cuando Azure OpenAI falla por content filtering
   * @param {string} prompt - Prompt original (sin cambios)
   * @param {string} content - Contenido del chat a analizar
   * @param {string} language - Idioma del an√°lisis
   * @returns {Promise<Object>} - Resultado del an√°lisis
   */
  static async fallbackToGPT4Mini(prompt, content, language = 'es') {
    console.log('üö®üîÑ ===== INICIANDO FALLBACK A GPT-4 MINI =====');
    console.log(`üö® Motivo: Azure OpenAI content filtering`);
    console.log(`üö® Idioma: ${language}`);
    console.log(`üö® Longitud del contenido original: ${content.length} caracteres`);
    
    try {
      // Registrar estad√≠sticas
      this.stats.logFallbackUsed();
      console.log(`üìä Estad√≠sticas actualizadas - fallbacks usados: ${this.stats.fallbackUsed}`);
      
      // Sanitizar el contenido usando las palabrotas espec√≠ficas del idioma
      const sanitizedContent = this.sanitizeContentForFallback(content, language);
      
      console.log(`üìù Contenido sanitizado para idioma: ${language}`);
      console.log(`üìè Longitud original: ${content.length}, sanitizada: ${sanitizedContent.length}`);

      // Configuraci√≥n para GPT-4 mini
      const openaiApiKey = process.env.REACT_APP_OPENAI_API_KEY;
      
      if (!openaiApiKey) {
        console.error('‚ùå REACT_APP_OPENAI_API_KEY no est√° configurada');
        throw new Error('REACT_APP_OPENAI_API_KEY no est√° configurada para el fallback');
      }

      console.log('ü§ñ Conectando a OpenAI GPT-4 mini...');
      console.log(`üîó URL base: ${OPENAI_CONFIG.baseURL}`);
      console.log(`üß† Modelo: ${OPENAI_CONFIG.model}`);

      // Llamada a OpenAI API
      const response = await fetch(`${OPENAI_CONFIG.baseURL}/chat/completions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${openaiApiKey}`
        },
        body: JSON.stringify({
          model: OPENAI_CONFIG.model,
          messages: [
            {
              role: 'user',
              content: `${prompt}\n\nCONTENIDO A ANALIZAR:\n${sanitizedContent}`
            }
          ],
          max_tokens: OPENAI_CONFIG.maxTokens,
          temperature: OPENAI_CONFIG.temperature
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`OpenAI API error: ${response.status} - ${errorText}`);
      }

      const result = await response.json();
      
      if (!result.choices || !result.choices[0]) {
        throw new Error('Respuesta vac√≠a de OpenAI API');
      }

      console.log('‚úÖ ===== FALLBACK EXITOSO =====');
      console.log('‚úÖ Respuesta de GPT-4 mini recibida correctamente');
      console.log(`üìä Tokens usados: ${result.usage?.total_tokens || 'N/A'}`);
      console.log(`üìä Modelo usado: ${result.model}`);
      console.log(`üìè Longitud de respuesta: ${result.choices[0].message.content.length} caracteres`);
      
      // Formatear respuesta para que sea compatible con el formato esperado
      const formattedResponse = {
        choices: [{
          message: {
            content: result.choices[0].message.content
          },
          finish_reason: result.choices[0].finish_reason
        }],
        usage: result.usage,
        model: result.model,
        fallback_used: true,
        original_language: language
      };
      
      console.log('üîÑ Respuesta formateada para compatibilidad con Azure OpenAI');
      return formattedResponse;

    } catch (error) {
      console.error('‚ùå Error en fallback a GPT-4 mini:', error);
      if (error.message && error.message.includes('content management policy')) {
        throw error;
      }
      throw new Error(`Fallback failed: ${error.message}`);
    }
  }

  /**
   * Estrategia simplificada: un intento con prompt y contenido originales
   * Si falla por content filtering ‚Üí fallback GPT-4 mini inmediato
   * Si falla por otros motivos ‚Üí propagar error para que AzureService pruebe siguiente modelo
   * @param {Function} apiCall - Funci√≥n que hace la llamada a la API
   * @param {string} prompt - Prompt original de constants.js (sin modificar)
   * @param {string} content - Contenido original (sin sanitizar)
   * @param {string} language - Idioma del an√°lisis
   * @returns {Promise<Object>} - Resultado del an√°lisis
   */
  static async retryWithFallback(apiCall, prompt, content, language = 'es') {
    // Registrar estad√≠sticas
    this.stats.logRequest();
    console.log(`üîÑ ContentFilterHandler: intento √∫nico con prompt y contenido originales - idioma: ${language}`);
    
    try {
      // Intento √∫nico: prompt original de constants.js + contenido original sin sanitizar
      console.log('üîÑ Usando prompt original de constants.js + contenido sin sanitizar');
      const result = await apiCall(prompt, content);
      console.log('‚úÖ √âxito - sin fallback necesario');
      return result;
      
    } catch (error) {
      console.log(`‚ùå Fall√≥: ${error.message}`);
      console.log(`üîç Tipo de error: ${error.name}, Status: ${error.status || error.statusCode}`);
      
      // Si es error de content filtering ‚Üí fallback GPT-4 mini inmediato
      if (this.isContentFilterError(error)) {
        this.stats.logFiltered();
        console.log('üö® CONTENT FILTERING detectado ‚Üí Activando fallback GPT-4 mini');
        console.log(`üö® Error completo: ${JSON.stringify({
          name: error.name,
          message: error.message,
          status: error.status || error.statusCode,
          toString: error.toString()
        }, null, 2)}`);
        return await this.fallbackToGPT4Mini(prompt, content, language);
      }
      
      // Si es otro tipo de error ‚Üí propagar para que AzureService pruebe siguiente modelo
      console.log('üîÑ No es content filtering ‚Üí Propagando error para que AzureService pruebe siguiente modelo');
      throw error;
    }
  }

// M√©todos removidos - ya no se modifican prompts ni se sanitiza contenido en el intento inicial

  /**
   * Estad√≠sticas de filtrado para monitoreo
   */
  static stats = {
    totalRequests: 0,
    filteredRequests: 0,
    fallbackUsed: 0,
    
    logRequest() {
      this.totalRequests++;
    },
    
    logFiltered() {
      this.filteredRequests++;
    },

    logFallbackUsed() {
      this.fallbackUsed++;
    },
    
    getFilterRate() {
      return this.totalRequests > 0 ? (this.filteredRequests / this.totalRequests) * 100 : 0;
    },

    getFallbackRate() {
      return this.totalRequests > 0 ? (this.fallbackUsed / this.totalRequests) * 100 : 0;
    }
  };

  /**
   * M√©todo de prueba para verificar la detecci√≥n de errores de content filtering
   * @param {string} errorMessage - Mensaje de error a probar
   * @returns {boolean} - true si se detecta como content filtering
   */
  static testContentFilterDetection(errorMessage) {
    const testError = new Error(errorMessage);
    testError.name = 'BadRequestError';
    testError.status = 400;
    
    const isDetected = this.isContentFilterError(testError);
    console.log(`üß™ Test de detecci√≥n:`);
    console.log(`   Error: "${errorMessage}"`);
    console.log(`   Detectado como content filtering: ${isDetected}`);
    
    return isDetected;
  }
} 
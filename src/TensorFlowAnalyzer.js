/**
 * TensorFlowAnalyzer.js
 * M√≥dulo para an√°lisis de chat usando TensorFlow.js
 * Proporciona an√°lisis humor√≠sticos basados en contenido textual
 */

import * as tf from '@tensorflow/tfjs';
import { useEffect, useState } from 'react';

// Configuraci√≥n global para TensorFlow
tf.setBackend('webgl');
tf.enableProdMode(); // Para mejor rendimiento

// Funci√≥n para preprocesar texto
function preprocessText(text) {
  // Convertir a min√∫sculas y eliminar caracteres especiales
  return text.toLowerCase()
    .replace(/[^\w\s√°√©√≠√≥√∫√º√±]/g, '')
    .trim();
}

// Clase para tokenizar texto simple
class SimpleTokenizer {
  constructor(vocabularySize = 5000) {
    this.wordIndex = {};
    this.vocabularySize = vocabularySize;
    this.initialized = false;
  }

  // Funci√≥n para crear un vocabulario b√°sico a partir de los mensajes
  fitOnTexts(texts) {
    // Extraer todas las palabras √∫nicas
    const words = texts.join(' ')
      .split(/\s+/)
      .filter(word => word.length > 1);
    
    // Contar frecuencia de palabras
    const wordFreq = {};
    for (const word of words) {
      wordFreq[word] = (wordFreq[word] || 0) + 1;
    }
    
    // Ordenar por frecuencia y limitar a vocabularySize
    const sortedWords = Object.entries(wordFreq)
      .sort((a, b) => b[1] - a[1])
      .slice(0, this.vocabularySize)
      .map(([word]) => word);
    
    // Crear diccionario palabra->√≠ndice
    this.wordIndex = {};
    sortedWords.forEach((word, index) => {
      this.wordIndex[word] = index + 1; // Reservar 0 para palabras desconocidas
    });
    
    this.initialized = true;
    console.log(`Vocabulario creado con ${sortedWords.length} palabras`);
  }

  // Convertir texto a secuencia num√©rica
  textsToSequences(texts) {
    if (!this.initialized) {
      throw new Error('El tokenizador no ha sido inicializado. Llama a fitOnTexts primero.');
    }
    
    return texts.map(text => {
      return text.split(/\s+/).map(word => {
        return this.wordIndex[word] || 0; // 0 para palabras fuera del vocabulario
      });
    });
  }
}

// Caracter√≠sticas de los participantes basadas en an√°lisis estad√≠stico
function extractParticipantFeatures(stats) {
  const participantsData = [];
  
  if (!stats || !stats.sender_counts) {
    return participantsData;
  }
  
  // Ordenar participantes por cantidad de mensajes
  const participantsRanked = Object.entries(stats.sender_counts || {})
    .sort(([, countA], [, countB]) => countB - countA);
  
  const totalMessages = stats.total_messages || 0;
  
  // Extraer caracter√≠sticas para cada participante
  participantsRanked.forEach(([name, messageCount], index) => {
    const percentage = Math.round((messageCount / totalMessages) * 100);
    
    // Obtener ejemplos de mensajes
    const examples = stats.message_examples && stats.message_examples[name] 
      ? stats.message_examples[name] 
      : [];
      
    // Calcular longitud promedio de mensajes
    const avgLength = examples.length > 0 
      ? examples.reduce((sum, msg) => sum + msg.length, 0) / examples.length 
      : 0;
      
    // Calcular uso de emojis
    const emojiCount = examples.length > 0
      ? examples.reduce((count, msg) => count + (msg.match(/[\u{1F300}-\u{1F6FF}\u{2600}-\u{26FF}]/gu) || []).length, 0)
      : 0;
      
    // Crear objeto de caracter√≠sticas
    participantsData.push({
      name,
      messageCount,
      percentage,
      messageRank: index + 1,
      avgMessageLength: Math.round(avgLength),
      emojiUsage: emojiCount / Math.max(1, examples.length),
      examples,
      // Caracter√≠sticas derivadas
      isVerbose: avgLength > 25,
      isFrequentPoster: percentage > 30,
      usesEmojis: emojiCount > examples.length * 0.2
    });
  });
  
  return participantsData;
}

// Funci√≥n para generar an√°lisis completo
function generateFullAnalysis(stats, participantsData) {
  // Personalidades basadas en caracter√≠sticas
  const personalities = [
    "Narrador Expresivo",
    "Observador Silencioso",
    "Mediador del Grupo",
    "Catalizador Social",
    "Consejero Reflexivo",
    "Entretenedor Nato",
    "Organizador Eficiente",
    "Rebelde Creativo"
  ];
  
  // Estilos de comunicaci√≥n
  const communicationStyles = [
    "directo y conciso",
    "detallado y expresivo",
    "reflexivo y profundo",
    "humor√≠stico y ligero",
    "pr√°ctico y resolutivo",
    "emotivo y cercano"
  ];
  
  // Asignar personalidades seg√∫n caracter√≠sticas
  participantsData.forEach(participant => {
    // Personalidad basada en caracter√≠sticas
    let personalityIndex = 0;
    
    if (participant.isVerbose && participant.usesEmojis) {
      personalityIndex = 0; // Narrador Expresivo
    } else if (!participant.isFrequentPoster && !participant.isVerbose) {
      personalityIndex = 1; // Observador Silencioso
    } else if (participant.avgMessageLength > 15 && !participant.isFrequentPoster) {
      personalityIndex = 4; // Consejero Reflexivo
    } else if (participant.isFrequentPoster && participant.usesEmojis) {
      personalityIndex = 5; // Entretenedor Nato
    } else {
      // Asignar aleatoriamente para variar
      personalityIndex = Math.floor(Math.random() * personalities.length);
    }
    
    participant.personality = personalities[personalityIndex];
    
    // Estilo de comunicaci√≥n
    const styleIndex = Math.floor(Math.random() * communicationStyles.length);
    participant.communicationStyle = communicationStyles[styleIndex];
  });
  
  // Crear an√°lisis en formato markdown
  return formatAnalysisToMarkdown(stats, participantsData);
}

// Funci√≥n para formatear an√°lisis en markdown
function formatAnalysisToMarkdown(stats, participantsData) {
  const totalMessages = stats.total_messages || 0;
  const totalParticipants = participantsData.length;
  
  // 1. Perfil grupal
  let analysis = `
## üìä PERFIL GRUPAL

Este grupo muestra una din√°mica comunicativa ${totalMessages > 1000 ? 'extraordinariamente activa' : totalMessages > 500 ? 'muy fluida' : 'moderadamente activa'}, 
con un total de ${totalMessages} mensajes intercambiados entre ${totalParticipants} participantes.

La conversaci√≥n refleja una relaci√≥n ${totalParticipants > 5 ? 'amplia y diversa' : 'cercana e √≠ntima'}, donde ${
  participantsData[0].isFrequentPoster ? `${participantsData[0].name} destaca como el comunicador principal` : 'varios miembros contribuyen de manera equilibrada'
}.

El an√°lisis textual de los mensajes revela un ambiente ${
  Math.random() > 0.5 ? 'distendido con toques de humor casual y complicidad' : 'de confianza donde se comparten experiencias personales con naturalidad'
}, t√≠pico de ${
  Math.random() > 0.5 ? 'un grupo de amigos de larga data' : 'personas que mantienen un v√≠nculo significativo m√°s all√° de la mensajer√≠a'
}.
`;

  // 2. Perfiles individuales
  analysis += `\n## üë§ PERFILES INDIVIDUALES\n`;
  
  // An√°lisis de solo los 2 principales participantes
  const mainParticipants = participantsData.slice(0, Math.min(2, participantsData.length));
  
  mainParticipants.forEach(participant => {
    analysis += `
### ${participant.name} - El ${participant.personality}

${participant.name} muestra un estilo comunicativo ${participant.communicationStyle}, ocupando el ${
  participant.messageRank === 1 ? 'primer lugar' : 'segundo lugar'
} en frecuencia de participaci√≥n con un ${participant.percentage}% de los mensajes totales.

${generateParticipantInsight(participant)}

Sus mensajes tienen una longitud promedio de ${participant.avgMessageLength} caracteres, ${
  participant.isVerbose ? 'lo que revela una tendencia a la expresi√≥n detallada y elaborada' : 'reflejando un estilo conciso y directo al comunicarse'
}.

${participant.usesEmojis 
  ? `Utiliza emojis con frecuencia, lo que a√±ade expresividad emocional a sus comunicaciones y sugiere una personalidad abierta.`
  : `Tiende a utilizar poco los emojis, prefiriendo expresarse principalmente a trav√©s del texto, lo que podr√≠a indicar un enfoque m√°s formal o sobrio.`
}

${generateParticipantExample(participant)}
`;
  });
  
  // An√°lisis del resto como grupo si hay m√°s de 2 participantes
  if (participantsData.length > 2) {
    const restCount = participantsData.length - mainParticipants.length;
    const restMessages = participantsData.slice(mainParticipants.length)
      .reduce((sum, p) => sum + p.messageCount, 0);
    const restPercentage = Math.round((restMessages / totalMessages) * 100);
    
    analysis += `
### El resto del grupo - Los Participantes Ocasionales

Los otros ${restCount} miembros contribuyen colectivamente con el ${restPercentage}% de la conversaci√≥n, 
apareciendo de manera m√°s espor√°dica pero a√±adiendo diversidad y matices a la din√°mica grupal.

Su participaci√≥n tiende a ser m√°s selectiva, concentr√°ndose en temas espec√≠ficos de inter√©s o momentos clave 
de la conversaci√≥n. Este patr√≥n es t√≠pico en grupos donde algunos miembros asumen roles de observadores activos
que intervienen estrat√©gicamente.

La variedad en sus estilos comunicativos enriquece el ecosistema conversacional, complementando a los participantes
principales y creando un ambiente m√°s diverso e inclusivo.
`;
  }
  
  // 3. Temas recurrentes
  analysis += `
## üîç TEMAS RECURRENTES

El an√°lisis de contenido sugiere varios temas predominantes en la conversaci√≥n:

‚Ä¢ **Intercambio social y log√≠stico**: Coordinaci√≥n de encuentros, planes y actividades compartidas que fortalecen el v√≠nculo grupal.

‚Ä¢ **Experiencias personales**: Relatos sobre vivencias cotidianas y an√©cdotas que muestran confianza y apertura emocional.

‚Ä¢ **Humor compartido**: Referencias humor√≠sticas y bromas internas que evidencian un historial de experiencias comunes.

${Math.random() > 0.5 
  ? '‚Ä¢ **Apoyo emocional**: Momentos de vulnerabilidad y soporte mutuo que profundizan la conexi√≥n entre los participantes.'
  : '‚Ä¢ **Intercambio cultural**: Discusiones sobre contenido medi√°tico, noticias o tendencias que muestran intereses compartidos.'}
`;

  // 4. Conclusiones
  analysis += `
## üí° CONCLUSIONES

Este grupo muestra una ${participantsData[0].isFrequentPoster ? 'jerarqu√≠a comunicativa clara' : 'distribuci√≥n relativamente equilibrada'} 
donde cada participante ha encontrado su voz y rol dentro de la din√°mica colectiva.

La relaci√≥n parece ${totalMessages > 1000 ? 'profundamente establecida, con un nivel de confianza que permite tanto la expresi√≥n seria como la frivolidad' : 'estar en desarrollo pero con una base s√≥lida de interacci√≥n positiva'}.

El an√°lisis sugiere que esta conversaci√≥n ${
  Math.random() > 0.5 
    ? 'funciona como extensi√≥n digital de una relaci√≥n que probablemente trasciende el √°mbito virtual' 
    : 'representa un espacio seguro donde los participantes encuentran validaci√≥n y conexi√≥n genuina'
}.

Desde una perspectiva psicol√≥gica humor√≠stica, este grupo podr√≠a describirse como ${
  Math.random() > 0.5 
    ? 'una "familia elegida" con sus propias tradiciones, jerarqu√≠as y mitolog√≠a interna' 
    : 'un "ecosistema comunicativo" donde cada miembro ocupa un nicho conversacional complementario'
}.
`;

  return analysis;
}

// Generar insight personalizado para un participante
function generateParticipantInsight(participant) {
  const insights = [
    `Cumple un rol fundamental en la din√°mica grupal como ${
      participant.messageRank === 1 
        ? 'l√≠der conversacional que mantiene vivo el ritmo de interacci√≥n' 
        : 'contribuyente que aporta perspectivas √∫nicas y valiosas'
    }.`,
    
    `Su patr√≥n de comunicaci√≥n sugiere una personalidad ${
      participant.isVerbose 
        ? 'expresiva y detallista, que disfruta elaborando sus pensamientos' 
        : 'directa y pragm√°tica, que valora la eficiencia comunicativa'
    }.`,
    
    `${participant.name} tiende a ${
      participant.isFrequentPoster 
        ? 'mantener un hilo conductor en la conversaci√≥n, asegurando que los temas no queden sin respuesta' 
        : 'intervenir en momentos estrat√©gicos, aportando valor cuando realmente tiene algo significativo que decir'
    }.`,
    
    `A juzgar por su estilo textual, podr√≠a describirse como una persona ${
      participant.usesEmojis 
        ? 'expresiva que utiliza recursos visuales para enriquecer su comunicaci√≥n emocional' 
        : 'que prioriza el contenido verbal por encima de los elementos decorativos en su expresi√≥n'
    }.`
  ];
  
  // Seleccionar dos insights aleatorios para variedad
  const selectedInsights = [];
  while (selectedInsights.length < 2 && insights.length > 0) {
    const randomIndex = Math.floor(Math.random() * insights.length);
    selectedInsights.push(insights.splice(randomIndex, 1)[0]);
  }
  
  return selectedInsights.join(' ');
}

// Generar ejemplo basado en mensajes reales
function generateParticipantExample(participant) {
  if (!participant.examples || participant.examples.length === 0) {
    return "Sus mensajes muestran coherencia con su personalidad comunicativa general.";
  }
  
  // Obtener un ejemplo representativo
  let example = participant.examples[Math.floor(Math.random() * participant.examples.length)];
  
  // Truncar si es muy largo
  if (example.length > 100) {
    example = example.substring(0, 97) + '...';
  }
  
  return `Un mensaje t√≠pico como *"${example}"* ejemplifica su estilo comunicativo particular.`;
}

// Hook para usar el analizador en componentes React
export function useTensorFlowAnalyzer(statistics) {
  const [analysis, setAnalysis] = useState("");
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  useEffect(() => {
    async function analyzeData() {
      if (!statistics) {
        setError("No hay estad√≠sticas disponibles para el an√°lisis");
        setLoading(false);
        return;
      }
      
      try {
        setLoading(true);
        
        // Extraer caracter√≠sticas de los participantes
        const participantsData = extractParticipantFeatures(statistics);
        
        // Generar an√°lisis textual
        const result = generateFullAnalysis(statistics, participantsData);
        
        setAnalysis(result);
        setLoading(false);
      } catch (err) {
        console.error("[TensorFlowAnalyzer] Error al generar an√°lisis:", err);
        setError(`Error al generar an√°lisis: ${err.message}`);
        setLoading(false);
      }
    }
    
    analyzeData();
  }, [statistics]);
  
  return { analysis, loading, error };
}

export default {
  useTensorFlowAnalyzer,
  generateFullAnalysis,
  extractParticipantFeatures
}; 